{
  "schemaVersion": "1.0.0",
  "readme": "",
  "modules": [
    {
      "kind": "javascript-module",
      "path": "src/Button.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "<h3 class=\"comment-api-title\">Overview</h3> The <code>ui5-button</code> component represents a simple push button. It enables users to trigger actions by clicking or tapping the <code>ui5-button</code>, or by pressing certain keyboard keys, such as Enter. <h3>Usage</h3> For the <code>ui5-button</code> UI, you can define text, icon, or both. You can also specify whether the text or the icon is displayed first. <br><br> You can choose from a set of predefined types that offer different styling to correspond to the triggered action. <br><br> You can set the <code>ui5-button</code> as enabled or disabled. An enabled <code>ui5-button</code> can be pressed by clicking or tapping it. The button changes its style to provide visual feedback to the user that it is pressed or hovered over with the mouse cursor. A disabled <code>ui5-button</code> appears inactive and cannot be pressed. <h3>ES6 Module Import</h3> <code>import \"@ui5/webcomponents/dist/Button\";</code>",
          "name": "Button",
          "cssParts": [
            {
              "description": "Used to style the native button element",
              "name": "button"
            }
          ],
          "slots": [
            {
              "name": "default",
              "description": "Defines the text of the component.\n<br><br>\n<b>Note:</b> Although this slot accepts HTML Elements, it is strongly recommended that you only use text in order to preserve the intended design.",
              "_ui5type": {
                "text": "Array<Node>"
              },
              "_ui5privacy": "public"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "_deactivate",
              "type": {
                "text": "() => void"
              }
            },
            {
              "kind": "field",
              "name": "_iconSettings",
              "type": {
                "text": "object"
              }
            },
            {
              "kind": "field",
              "name": "_isReset",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "_isSubmit",
              "readonly": true
            },
            {
              "kind": "method",
              "name": "_onclick",
              "parameters": [
                {
                  "name": "e",
                  "type": {
                    "text": "MouseEvent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "_onfocusin",
              "parameters": [
                {
                  "name": "e",
                  "type": {
                    "text": "FocusEvent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "_onfocusout"
            },
            {
              "kind": "method",
              "name": "_onkeydown",
              "parameters": [
                {
                  "name": "e",
                  "type": {
                    "text": "KeyboardEvent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "_onkeyup",
              "parameters": [
                {
                  "name": "e",
                  "type": {
                    "text": "KeyboardEvent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "_onmousedown",
              "parameters": [
                {
                  "name": "e",
                  "type": {
                    "text": "MouseEvent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "_onmouseup",
              "parameters": [
                {
                  "name": "e",
                  "type": {
                    "text": "MouseEvent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "_ontouchend",
              "parameters": [
                {
                  "name": "e",
                  "type": {
                    "text": "TouchEvent"
                  }
                }
              ]
            },
            {
              "kind": "field",
              "name": "_ontouchstart",
              "type": {
                "text": "PassiveEventListenerObject"
              },
              "default": "{\n\t\t\thandleEvent: handleTouchStartEvent,\n\t\t\tpassive: true,\n\t\t}"
            },
            {
              "kind": "field",
              "name": "accessibilityAttributes",
              "type": {
                "text": "{ expanded: \"true\" | \"false\", hasPopup: \"Dialog\" | \"Grid\" | \"ListBox\" | \"Menu\" | \"Tree\", controls: string}"
              },
              "description": "An object of strings that defines several additional accessibility attribute values\nfor customization depending on the use case.\n\nIt supports the following fields:\n\n<ul>\n\t\t<li><code>expanded</code>: Indicates whether the button, or another grouping element it controls, is currently expanded or collapsed. Accepts the following string values:\n\t\t<ul>\n\t\t\t<li><code>true</code></li>\n\t\t\t<li><code>false</code></li>\n\t\t</ul>\n\t\t</li>\n\t\t<li><code>hasPopup</code>: Indicates the availability and type of interactive popup element, such as menu or dialog, that can be triggered by the button. Accepts the following string values:\n\t\t\t<ul>\n\t\t\t<li><code>Dialog</code></li>\n\t\t\t<li><code>Grid</code></li>\n\t\t\t<li><code>ListBox</code></li>\n\t\t\t<li><code>Menu</code></li>\n\t\t\t<li><code>Tree</code></li>\n\t\t\t</ul>\n\t\t</li>\n\t\t<li><code>controls</code>: Identifies the element (or elements) whose contents or presence are controlled by the button element. Accepts a string value.</li>\n</ul>",
              "default": "\"{}\"",
              "privacy": "public",
              "_ui5since": "1.2.0"
            },
            {
              "kind": "field",
              "name": "accessibleName",
              "type": {
                "text": "string | undefined"
              },
              "description": "Defines the accessible ARIA name of the component.",
              "default": "undefined",
              "privacy": "public",
              "_ui5since": "1.0.0-rc.15"
            },
            {
              "kind": "field",
              "name": "accessibleNameRef",
              "type": {
                "text": "string"
              },
              "description": "Receives id(or many ids) of the elements that label the component.",
              "default": "\"\"",
              "privacy": "public",
              "_ui5since": "1.1.0"
            },
            {
              "kind": "field",
              "name": "ariaLabelText",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "buttonTypeText",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "design",
              "type": {
                "text": "ButtonDesign",
                "references": [
                  {
                    "name": "ButtonDesign",
                    "package": "@ui5/webcomponents",
                    "module": "dist/types/ButtonDesign.js"
                  }
                ]
              },
              "description": "Defines the component design.",
              "default": "\"Default\"",
              "privacy": "public"
            },
            {
              "kind": "field",
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "description": "Defines whether the component is disabled.\nA disabled component can't be pressed or\nfocused, and it is not in the tab chain.",
              "default": "false",
              "privacy": "public"
            },
            {
              "kind": "field",
              "name": "hasButtonType",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "i18nBundle",
              "type": {
                "text": "I18nBundle"
              },
              "static": true
            },
            {
              "kind": "field",
              "name": "icon",
              "type": {
                "text": "string"
              },
              "description": "Defines the icon, displayed as graphical element within the component.\nThe SAP-icons font provides numerous options.\n<br><br>\nExample:\n\nSee all the available icons within the <ui5-link target=\"_blank\" href=\"https://sdk.openui5.org/test-resources/sap/m/demokit/iconExplorer/webapp/index.html\">Icon Explorer</ui5-link>.",
              "default": "\"\"",
              "privacy": "public"
            },
            {
              "kind": "field",
              "name": "iconEnd",
              "type": {
                "text": "boolean"
              },
              "description": "Defines whether the icon should be displayed after the component text.",
              "default": "false",
              "privacy": "public"
            },
            {
              "kind": "field",
              "name": "iconRole",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "isIconOnly",
              "readonly": true
            },
            {
              "kind": "method",
              "name": "onBeforeRendering"
            },
            {
              "kind": "method",
              "name": "onDefine",
              "static": true
            },
            {
              "kind": "method",
              "name": "onEnterDOM"
            },
            {
              "kind": "field",
              "name": "showIconTooltip",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "submits",
              "type": {
                "text": "boolean"
              },
              "description": "When set to <code>true</code>, the component will\nautomatically submit the nearest HTML form element on <code>press</code>.\n<br><br>\n<b>Note:</b> For the <code>submits</code> property to have effect, you must add the following import to your project:\n<code>import \"@ui5/webcomponents/dist/features/InputElementsFormSupport.js\";</code>",
              "default": "false",
              "privacy": "public",
              "deprecated": "Set the \"type\" property to \"Submit\" to achieve the same result. The \"submits\" property is ignored if \"type\" is set to any value other than \"Button\"."
            },
            {
              "kind": "field",
              "name": "tabIndexValue",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "tooltip",
              "type": {
                "text": "string"
              },
              "description": "Defines the tooltip of the component.\n<br>\n<b>Note:</b> A tooltip attribute should be provided for icon-only buttons, in order to represent their exact meaning/function.",
              "default": "\"\"",
              "privacy": "public",
              "_ui5since": "1.2.0"
            },
            {
              "kind": "field",
              "name": "type",
              "type": {
                "text": "ButtonType",
                "references": [
                  {
                    "name": "ButtonType",
                    "package": "@ui5/webcomponents",
                    "module": "dist/types/ButtonType.js"
                  }
                ]
              },
              "description": "Defines whether the button has special form-related functionality.\n\n<br><br>\n<b>Note:</b> For the <code>type</code> property to have effect, you must add the following import to your project:\n<code>import \"@ui5/webcomponents/dist/features/InputElementsFormSupport.js\";</code>",
              "default": "\"Button\"",
              "privacy": "public",
              "_ui5since": "1.15.0"
            },
            {
              "kind": "method",
              "name": "typeTextMappings",
              "static": true,
              "return": {
                "type": {
                  "text": "Record<string, I18nText>"
                }
              }
            }
          ],
          "events": [
            {
              "name": "click",
              "_ui5privacy": "public",
              "type": {
                "text": "Event"
              },
              "description": "Fired when the component is activated either with a mouse/tap or by using the Enter or Space key. <br><br> <b>Note:</b> The event will not be fired if the <code>disabled</code> property is set to <code>true</code>."
            }
          ],
          "superclass": {
            "name": "UI5Element",
            "package": "@ui5/webcomponents-base",
            "module": "dist/UI5Element.js"
          },
          "tagName": "ui5-button",
          "customElement": true,
          "_ui5privacy": "public",
          "_ui5implements": [
            {
              "name": "IButton",
              "package": "@ui5/webcomponents",
              "module": "dist/Button.js"
            },
            {
              "name": "IFormElement",
              "package": "@ui5/webcomponents",
              "module": "dist/features/InputElementsFormSupport.js"
            }
          ]
        },
        {
          "kind": "interface",
          "name": "IButton",
          "description": "Interface for components that may be used as a button inside numerous higher-order components",
          "_ui5privacy": "public"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "Button",
            "module": "src/Button.ts"
          }
        },
        {
          "kind": "js",
          "name": "IButton",
          "declaration": {
            "name": "IButton",
            "module": "src/Button.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/ListItem.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "A class to serve as a base for the <code>StandardListItem</code> and <code>CustomListItem</code> classes.",
          "name": "ListItem",
          "slots": [
            {
              "name": "deleteButton",
              "description": "Defines the delete button, displayed in \"Delete\" mode.\n<b>Note:</b> While the slot allows custom buttons, to match\ndesign guidelines, please use the <code>ui5-button</code> component.\n<b>Note:</b> When the slot is not present, a built-in delete button will be displayed.",
              "_ui5since": "1.9.0",
              "_ui5type": {
                "text": "Array<IButton>",
                "references": [
                  {
                    "name": "IButton",
                    "package": "@ui5/webcomponents",
                    "module": "dist/Button.js"
                  }
                ]
              },
              "_ui5privacy": "public"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "_accessibleNameRef",
              "type": {
                "text": "string"
              },
              "readonly": true
            },
            {
              "kind": "field",
              "name": "_accInfo",
              "type": {
                "text": "AccInfo"
              },
              "readonly": true
            },
            {
              "kind": "field",
              "name": "_ariaSelected",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "_level",
              "type": {
                "text": "number | undefined"
              }
            },
            {
              "kind": "field",
              "name": "_mode",
              "type": {
                "text": "`${ListMode}`"
              }
            },
            {
              "kind": "method",
              "name": "_onclick",
              "parameters": [
                {
                  "name": "e",
                  "type": {
                    "text": "MouseEvent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "_onfocusout",
              "inheritedFrom": {
                "name": "ListItemBase",
                "module": "src/ListItemBase.ts"
              }
            },
            {
              "kind": "method",
              "name": "_onkeydown",
              "parameters": [
                {
                  "name": "e",
                  "type": {
                    "text": "KeyboardEvent"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "ListItemBase",
                "module": "src/ListItemBase.ts"
              }
            },
            {
              "kind": "method",
              "name": "_onkeyup",
              "parameters": [
                {
                  "name": "e",
                  "type": {
                    "text": "KeyboardEvent"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "ListItemBase",
                "module": "src/ListItemBase.ts"
              }
            },
            {
              "kind": "method",
              "name": "_onmousedown",
              "parameters": [
                {
                  "name": "e",
                  "type": {
                    "text": "MouseEvent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "_onmouseup",
              "parameters": [
                {
                  "name": "e",
                  "type": {
                    "text": "MouseEvent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "_ontouchend",
              "parameters": [
                {
                  "name": "e",
                  "type": {
                    "text": "TouchEvent"
                  }
                }
              ]
            },
            {
              "kind": "field",
              "name": "_ontouchstart",
              "type": {
                "text": "PassiveEventListenerObject"
              },
              "default": "{\n\t\t\thandleEvent: handleTouchStartEvent,\n\t\t\tpassive: true,\n\t\t}"
            },
            {
              "kind": "field",
              "name": "accessibilityAttributes",
              "type": {
                "text": "AccessibilityAttributes",
                "references": [
                  {
                    "name": "AccessibilityAttributes",
                    "package": "@ui5/webcomponents",
                    "module": "dist/ListItem.js"
                  }
                ]
              },
              "description": "An object of strings that defines several additional accessibility attribute values\nfor customization depending on the use case.\n\n It supports the following fields:\n\n<ul>\n\t\t<li><code>ariaSetsize</code>: Defines the number of items in the current set of listitems or treeitems when not all items in the set are present in the DOM.\n\t\tThe value of each <code>aria-setsize</code> is an integer reflecting number of items in the complete set.\n\t\t<b>Note: </b> If the size of the entire set is unknown, set <code>aria-setsize=\"-1\"</code>.\n\t\t</li>\n\t\t<li><code>ariaPosinset</code>: Defines an element's number or position in the current set of listitems or treeitems when not all items are present in the DOM.\n\t\tThe value of each <code>aria-posinset</code> is an integer greater than or equal to 1, and less than or equal to the size of the set when that size is known.\n\t\t</li>\n</ul>",
              "default": "\"{}\"",
              "privacy": "public",
              "_ui5since": "1.15.0"
            },
            {
              "kind": "field",
              "name": "accessibleName",
              "type": {
                "text": "string | undefined"
              }
            },
            {
              "kind": "method",
              "name": "activate"
            },
            {
              "kind": "field",
              "name": "ariaSelectedText",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "deactivate",
              "type": {
                "text": "() => void"
              }
            },
            {
              "kind": "field",
              "name": "deactivateByKey",
              "type": {
                "text": "(e: KeyboardEvent) => void"
              }
            },
            {
              "kind": "field",
              "name": "deleteText",
              "readonly": true
            },
            {
              "kind": "method",
              "name": "fireItemPress",
              "parameters": [
                {
                  "name": "e",
                  "type": {
                    "text": "Event"
                  }
                }
              ]
            },
            {
              "kind": "field",
              "name": "hasConfigurableMode",
              "readonly": true,
              "inheritedFrom": {
                "name": "ListItemBase",
                "module": "src/ListItemBase.ts"
              }
            },
            {
              "kind": "field",
              "name": "hasDeleteButtonSlot",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "i18nBundle",
              "type": {
                "text": "I18nBundle"
              },
              "static": true
            },
            {
              "kind": "field",
              "name": "indeterminate",
              "type": {
                "text": "boolean | undefined"
              }
            },
            {
              "kind": "field",
              "name": "isInactive",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "modeDelete",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "modeMultiSelect",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "modeSingleSelect",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "navigated",
              "type": {
                "text": "boolean"
              },
              "description": "The navigated state of the list item.\nIf set to <code>true</code>, a navigation indicator is displayed at the end of the list item.",
              "privacy": "public",
              "default": "false",
              "_ui5since": "1.10.0"
            },
            {
              "kind": "method",
              "name": "onBeforeRendering"
            },
            {
              "kind": "method",
              "name": "onDefine",
              "static": true
            },
            {
              "kind": "method",
              "name": "onDelete"
            },
            {
              "kind": "method",
              "name": "onDetailClick"
            },
            {
              "kind": "method",
              "name": "onEnterDOM"
            },
            {
              "kind": "method",
              "name": "onExitDOM"
            },
            {
              "kind": "method",
              "name": "onMultiSelectionComponentPress",
              "parameters": [
                {
                  "name": "e",
                  "type": {
                    "text": "MouseEvent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "onSingleSelectionComponentPress",
              "parameters": [
                {
                  "name": "e",
                  "type": {
                    "text": "MouseEvent"
                  }
                }
              ]
            },
            {
              "kind": "field",
              "name": "placeSelectionElementAfter",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "placeSelectionElementBefore",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "renderDeleteButton",
              "description": "Used in UploadCollectionItem",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "type",
              "type": {
                "text": "ListItemType",
                "references": [
                  {
                    "name": "ListItemType",
                    "package": "@ui5/webcomponents",
                    "module": "dist/types/ListItemType.js"
                  }
                ]
              },
              "description": "Defines the visual indication and behavior of the list items.\nAvailable options are <code>Active</code> (by default), <code>Inactive</code>, <code>Detail</code> and <code>Navigation</code>.\n<br><br>\n<b>Note:</b> When set to <code>Active</code> or <code>Navigation</code>, the item will provide visual response upon press and hover,\nwhile with type <code>Inactive</code> and <code>Detail</code> - will not.",
              "default": "\"Active\"",
              "privacy": "public"
            },
            {
              "kind": "field",
              "name": "typeActive",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "typeDetail",
              "description": "End",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "typeNavigation",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "_ariaDisabled",
              "readonly": true,
              "inheritedFrom": {
                "name": "ListItemBase",
                "module": "src/ListItemBase.ts"
              }
            },
            {
              "kind": "field",
              "name": "_effectiveTabIndex",
              "readonly": true,
              "inheritedFrom": {
                "name": "ListItemBase",
                "module": "src/ListItemBase.ts"
              }
            },
            {
              "kind": "method",
              "name": "_handleTabNext",
              "parameters": [
                {
                  "name": "e",
                  "type": {
                    "text": "KeyboardEvent"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "ListItemBase",
                "module": "src/ListItemBase.ts"
              }
            },
            {
              "kind": "method",
              "name": "_handleTabPrevious",
              "parameters": [
                {
                  "name": "e",
                  "type": {
                    "text": "KeyboardEvent"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "ListItemBase",
                "module": "src/ListItemBase.ts"
              }
            },
            {
              "kind": "method",
              "name": "_onfocusin",
              "parameters": [
                {
                  "name": "e",
                  "type": {
                    "text": "FocusEvent"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "ListItemBase",
                "module": "src/ListItemBase.ts"
              }
            },
            {
              "kind": "field",
              "name": "_tabIndex",
              "type": {
                "text": "string"
              },
              "inheritedFrom": {
                "name": "ListItemBase",
                "module": "src/ListItemBase.ts"
              }
            },
            {
              "kind": "field",
              "name": "classes",
              "type": {
                "text": "ClassMap"
              },
              "readonly": true,
              "inheritedFrom": {
                "name": "ListItemBase",
                "module": "src/ListItemBase.ts"
              }
            },
            {
              "kind": "field",
              "name": "selected",
              "type": {
                "text": "boolean"
              },
              "description": "Defines the selected state of the <code>ListItem</code>.",
              "default": "false",
              "privacy": "public",
              "inheritedFrom": {
                "name": "ListItemBase",
                "module": "src/ListItemBase.ts"
              }
            },
            {
              "kind": "method",
              "name": "shouldForwardTabAfter",
              "inheritedFrom": {
                "name": "ListItemBase",
                "module": "src/ListItemBase.ts"
              }
            },
            {
              "kind": "method",
              "name": "shouldForwardTabBefore",
              "parameters": [
                {
                  "name": "target",
                  "type": {
                    "text": "HTMLElement"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "ListItemBase",
                "module": "src/ListItemBase.ts"
              }
            }
          ],
          "events": [
            {
              "name": "detail-click",
              "_ui5privacy": "public",
              "type": {
                "text": "CustomEvent"
              },
              "description": "Fired when the user clicks on the detail button when type is <code>Detail</code>."
            }
          ],
          "superclass": {
            "name": "ListItemBase",
            "package": "@ui5/webcomponents",
            "module": "dist/ListItemBase.js"
          },
          "customElement": true,
          "_ui5privacy": "public"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "AccessibilityAttributes",
          "declaration": {
            "name": "AccessibilityAttributes",
            "module": "src/ListItem.ts"
          }
        },
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "ListItem",
            "module": "src/ListItem.ts"
          }
        },
        {
          "kind": "js",
          "name": "IAccessibleListItem",
          "declaration": {
            "name": "IAccessibleListItem",
            "module": "src/ListItem.ts"
          }
        },
        {
          "kind": "js",
          "name": "PressEventDetail",
          "declaration": {
            "name": "PressEventDetail",
            "module": "src/ListItem.ts"
          }
        },
        {
          "kind": "js",
          "name": "SelectionRequestEventDetail",
          "declaration": {
            "name": "SelectionRequestEventDetail",
            "module": "src/ListItem.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/ListItemBase.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "A class to serve as a foundation for the <code>ListItem</code> and <code>GroupHeaderListItem</code> classes.",
          "name": "ListItemBase",
          "members": [
            {
              "kind": "field",
              "name": "_ariaDisabled",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "_effectiveTabIndex",
              "readonly": true
            },
            {
              "kind": "method",
              "name": "_handleTabNext",
              "parameters": [
                {
                  "name": "e",
                  "type": {
                    "text": "KeyboardEvent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "_handleTabPrevious",
              "parameters": [
                {
                  "name": "e",
                  "type": {
                    "text": "KeyboardEvent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "_onfocusin",
              "parameters": [
                {
                  "name": "e",
                  "type": {
                    "text": "FocusEvent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "_onfocusout"
            },
            {
              "kind": "method",
              "name": "_onkeydown",
              "parameters": [
                {
                  "name": "e",
                  "type": {
                    "text": "KeyboardEvent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "_onkeyup",
              "parameters": [
                {
                  "name": "e",
                  "type": {
                    "text": "KeyboardEvent"
                  }
                }
              ]
            },
            {
              "kind": "field",
              "name": "_tabIndex",
              "type": {
                "text": "string"
              }
            },
            {
              "kind": "field",
              "name": "classes",
              "type": {
                "text": "ClassMap"
              },
              "readonly": true
            },
            {
              "kind": "field",
              "name": "hasConfigurableMode",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "selected",
              "type": {
                "text": "boolean"
              },
              "description": "Defines the selected state of the <code>ListItem</code>.",
              "default": "false",
              "privacy": "public"
            },
            {
              "kind": "method",
              "name": "shouldForwardTabAfter"
            },
            {
              "kind": "method",
              "name": "shouldForwardTabBefore",
              "parameters": [
                {
                  "name": "target",
                  "type": {
                    "text": "HTMLElement"
                  }
                }
              ]
            }
          ],
          "superclass": {
            "name": "UI5Element",
            "package": "@ui5/webcomponents-base",
            "module": "dist/UI5Element.js"
          },
          "customElement": true,
          "_ui5privacy": "public"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "ListItemBase",
            "module": "src/ListItemBase.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/ToggleButton.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "<h3 class=\"comment-api-title\">Overview</h3> The <code>ui5-toggle-button</code> component is an enhanced <code>ui5-button</code> that can be toggled between pressed and normal states. Users can use the <code>ui5-toggle-button</code> as a switch to turn a setting on or off. It can also be used to represent an independent choice similar to a check box. <br><br> Clicking or tapping on a <code>ui5-toggle-button</code> changes its state to <code>pressed</code>. The button returns to its initial state when the user clicks or taps on it again. By applying additional custom CSS-styling classes, apps can give a different style to any <code>ui5-toggle-button</code>. <h3>ES6 Module Import</h3> <code>import \"@ui5/webcomponents/dist/ToggleButton\";</code>",
          "name": "ToggleButton",
          "members": [
            {
              "kind": "method",
              "name": "_onclick",
              "parameters": [
                {
                  "name": "e",
                  "type": {
                    "text": "MouseEvent"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "Button",
                "module": "src/Button.ts"
              }
            },
            {
              "kind": "method",
              "name": "_onkeyup",
              "parameters": [
                {
                  "name": "e",
                  "type": {
                    "text": "KeyboardEvent"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "Button",
                "module": "src/Button.ts"
              }
            },
            {
              "kind": "field",
              "name": "pressed",
              "type": {
                "text": "boolean"
              },
              "description": "Determines whether the component is displayed as pressed.",
              "default": "false",
              "privacy": "public"
            },
            {
              "kind": "field",
              "name": "_deactivate",
              "type": {
                "text": "() => void"
              },
              "inheritedFrom": {
                "name": "Button",
                "module": "src/Button.ts"
              }
            },
            {
              "kind": "field",
              "name": "_iconSettings",
              "type": {
                "text": "object"
              },
              "inheritedFrom": {
                "name": "Button",
                "module": "src/Button.ts"
              }
            },
            {
              "kind": "field",
              "name": "_isReset",
              "readonly": true,
              "inheritedFrom": {
                "name": "Button",
                "module": "src/Button.ts"
              }
            },
            {
              "kind": "field",
              "name": "_isSubmit",
              "readonly": true,
              "inheritedFrom": {
                "name": "Button",
                "module": "src/Button.ts"
              }
            },
            {
              "kind": "method",
              "name": "_onfocusin",
              "parameters": [
                {
                  "name": "e",
                  "type": {
                    "text": "FocusEvent"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "Button",
                "module": "src/Button.ts"
              }
            },
            {
              "kind": "method",
              "name": "_onfocusout",
              "inheritedFrom": {
                "name": "Button",
                "module": "src/Button.ts"
              }
            },
            {
              "kind": "method",
              "name": "_onkeydown",
              "parameters": [
                {
                  "name": "e",
                  "type": {
                    "text": "KeyboardEvent"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "Button",
                "module": "src/Button.ts"
              }
            },
            {
              "kind": "method",
              "name": "_onmousedown",
              "parameters": [
                {
                  "name": "e",
                  "type": {
                    "text": "MouseEvent"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "Button",
                "module": "src/Button.ts"
              }
            },
            {
              "kind": "method",
              "name": "_onmouseup",
              "parameters": [
                {
                  "name": "e",
                  "type": {
                    "text": "MouseEvent"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "Button",
                "module": "src/Button.ts"
              }
            },
            {
              "kind": "method",
              "name": "_ontouchend",
              "parameters": [
                {
                  "name": "e",
                  "type": {
                    "text": "TouchEvent"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "Button",
                "module": "src/Button.ts"
              }
            },
            {
              "kind": "field",
              "name": "_ontouchstart",
              "type": {
                "text": "PassiveEventListenerObject"
              },
              "default": "{\n\t\t\thandleEvent: handleTouchStartEvent,\n\t\t\tpassive: true,\n\t\t}",
              "inheritedFrom": {
                "name": "Button",
                "module": "src/Button.ts"
              }
            },
            {
              "kind": "field",
              "name": "accessibilityAttributes",
              "type": {
                "text": "{ expanded: \"true\" | \"false\", hasPopup: \"Dialog\" | \"Grid\" | \"ListBox\" | \"Menu\" | \"Tree\", controls: string}"
              },
              "description": "An object of strings that defines several additional accessibility attribute values\nfor customization depending on the use case.\n\nIt supports the following fields:\n\n<ul>\n\t\t<li><code>expanded</code>: Indicates whether the button, or another grouping element it controls, is currently expanded or collapsed. Accepts the following string values:\n\t\t<ul>\n\t\t\t<li><code>true</code></li>\n\t\t\t<li><code>false</code></li>\n\t\t</ul>\n\t\t</li>\n\t\t<li><code>hasPopup</code>: Indicates the availability and type of interactive popup element, such as menu or dialog, that can be triggered by the button. Accepts the following string values:\n\t\t\t<ul>\n\t\t\t<li><code>Dialog</code></li>\n\t\t\t<li><code>Grid</code></li>\n\t\t\t<li><code>ListBox</code></li>\n\t\t\t<li><code>Menu</code></li>\n\t\t\t<li><code>Tree</code></li>\n\t\t\t</ul>\n\t\t</li>\n\t\t<li><code>controls</code>: Identifies the element (or elements) whose contents or presence are controlled by the button element. Accepts a string value.</li>\n</ul>",
              "default": "\"{}\"",
              "privacy": "public",
              "_ui5since": "1.2.0",
              "inheritedFrom": {
                "name": "Button",
                "module": "src/Button.ts"
              }
            },
            {
              "kind": "field",
              "name": "accessibleName",
              "type": {
                "text": "string | undefined"
              },
              "description": "Defines the accessible ARIA name of the component.",
              "default": "undefined",
              "privacy": "public",
              "_ui5since": "1.0.0-rc.15",
              "inheritedFrom": {
                "name": "Button",
                "module": "src/Button.ts"
              }
            },
            {
              "kind": "field",
              "name": "accessibleNameRef",
              "type": {
                "text": "string"
              },
              "description": "Receives id(or many ids) of the elements that label the component.",
              "default": "\"\"",
              "privacy": "public",
              "_ui5since": "1.1.0",
              "inheritedFrom": {
                "name": "Button",
                "module": "src/Button.ts"
              }
            },
            {
              "kind": "field",
              "name": "ariaLabelText",
              "readonly": true,
              "inheritedFrom": {
                "name": "Button",
                "module": "src/Button.ts"
              }
            },
            {
              "kind": "field",
              "name": "buttonTypeText",
              "readonly": true,
              "inheritedFrom": {
                "name": "Button",
                "module": "src/Button.ts"
              }
            },
            {
              "kind": "field",
              "name": "design",
              "type": {
                "text": "ButtonDesign",
                "references": [
                  {
                    "name": "ButtonDesign",
                    "package": "@ui5/webcomponents",
                    "module": "dist/types/ButtonDesign.js"
                  }
                ]
              },
              "description": "Defines the component design.",
              "default": "\"Default\"",
              "privacy": "public",
              "inheritedFrom": {
                "name": "Button",
                "module": "src/Button.ts"
              }
            },
            {
              "kind": "field",
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "description": "Defines whether the component is disabled.\nA disabled component can't be pressed or\nfocused, and it is not in the tab chain.",
              "default": "false",
              "privacy": "public",
              "inheritedFrom": {
                "name": "Button",
                "module": "src/Button.ts"
              }
            },
            {
              "kind": "field",
              "name": "hasButtonType",
              "readonly": true,
              "inheritedFrom": {
                "name": "Button",
                "module": "src/Button.ts"
              }
            },
            {
              "kind": "field",
              "name": "i18nBundle",
              "type": {
                "text": "I18nBundle"
              },
              "static": true,
              "inheritedFrom": {
                "name": "Button",
                "module": "src/Button.ts"
              }
            },
            {
              "kind": "field",
              "name": "icon",
              "type": {
                "text": "string"
              },
              "description": "Defines the icon, displayed as graphical element within the component.\nThe SAP-icons font provides numerous options.\n<br><br>\nExample:\n\nSee all the available icons within the <ui5-link target=\"_blank\" href=\"https://sdk.openui5.org/test-resources/sap/m/demokit/iconExplorer/webapp/index.html\">Icon Explorer</ui5-link>.",
              "default": "\"\"",
              "privacy": "public",
              "inheritedFrom": {
                "name": "Button",
                "module": "src/Button.ts"
              }
            },
            {
              "kind": "field",
              "name": "iconEnd",
              "type": {
                "text": "boolean"
              },
              "description": "Defines whether the icon should be displayed after the component text.",
              "default": "false",
              "privacy": "public",
              "inheritedFrom": {
                "name": "Button",
                "module": "src/Button.ts"
              }
            },
            {
              "kind": "field",
              "name": "iconRole",
              "readonly": true,
              "inheritedFrom": {
                "name": "Button",
                "module": "src/Button.ts"
              }
            },
            {
              "kind": "field",
              "name": "isIconOnly",
              "readonly": true,
              "inheritedFrom": {
                "name": "Button",
                "module": "src/Button.ts"
              }
            },
            {
              "kind": "method",
              "name": "onBeforeRendering",
              "inheritedFrom": {
                "name": "Button",
                "module": "src/Button.ts"
              }
            },
            {
              "kind": "method",
              "name": "onDefine",
              "static": true,
              "inheritedFrom": {
                "name": "Button",
                "module": "src/Button.ts"
              }
            },
            {
              "kind": "method",
              "name": "onEnterDOM",
              "inheritedFrom": {
                "name": "Button",
                "module": "src/Button.ts"
              }
            },
            {
              "kind": "field",
              "name": "showIconTooltip",
              "readonly": true,
              "inheritedFrom": {
                "name": "Button",
                "module": "src/Button.ts"
              }
            },
            {
              "kind": "field",
              "name": "submits",
              "type": {
                "text": "boolean"
              },
              "description": "When set to <code>true</code>, the component will\nautomatically submit the nearest HTML form element on <code>press</code>.\n<br><br>\n<b>Note:</b> For the <code>submits</code> property to have effect, you must add the following import to your project:\n<code>import \"@ui5/webcomponents/dist/features/InputElementsFormSupport.js\";</code>",
              "default": "false",
              "privacy": "public",
              "deprecated": "Set the \"type\" property to \"Submit\" to achieve the same result. The \"submits\" property is ignored if \"type\" is set to any value other than \"Button\".",
              "inheritedFrom": {
                "name": "Button",
                "module": "src/Button.ts"
              }
            },
            {
              "kind": "field",
              "name": "tabIndexValue",
              "readonly": true,
              "inheritedFrom": {
                "name": "Button",
                "module": "src/Button.ts"
              }
            },
            {
              "kind": "field",
              "name": "tooltip",
              "type": {
                "text": "string"
              },
              "description": "Defines the tooltip of the component.\n<br>\n<b>Note:</b> A tooltip attribute should be provided for icon-only buttons, in order to represent their exact meaning/function.",
              "default": "\"\"",
              "privacy": "public",
              "_ui5since": "1.2.0",
              "inheritedFrom": {
                "name": "Button",
                "module": "src/Button.ts"
              }
            },
            {
              "kind": "field",
              "name": "type",
              "type": {
                "text": "ButtonType",
                "references": [
                  {
                    "name": "ButtonType",
                    "package": "@ui5/webcomponents",
                    "module": "dist/types/ButtonType.js"
                  }
                ]
              },
              "description": "Defines whether the button has special form-related functionality.\n\n<br><br>\n<b>Note:</b> For the <code>type</code> property to have effect, you must add the following import to your project:\n<code>import \"@ui5/webcomponents/dist/features/InputElementsFormSupport.js\";</code>",
              "default": "\"Button\"",
              "privacy": "public",
              "_ui5since": "1.15.0",
              "inheritedFrom": {
                "name": "Button",
                "module": "src/Button.ts"
              }
            },
            {
              "kind": "method",
              "name": "typeTextMappings",
              "static": true,
              "return": {
                "type": {
                  "text": "Record<string, I18nText>"
                }
              },
              "inheritedFrom": {
                "name": "Button",
                "module": "src/Button.ts"
              }
            }
          ],
          "superclass": {
            "name": "Button",
            "package": "@ui5/webcomponents",
            "module": "dist/Button.js"
          },
          "tagName": "ui5-toggle-button",
          "customElement": true,
          "_ui5privacy": "public",
          "events": [
            {
              "name": "click",
              "_ui5privacy": "public",
              "type": {
                "text": "Event"
              },
              "description": "Fired when the component is activated either with a mouse/tap or by using the Enter or Space key. <br><br> <b>Note:</b> The event will not be fired if the <code>disabled</code> property is set to <code>true</code>.",
              "inheritedFrom": {
                "name": "Button",
                "module": "src/Button.ts"
              }
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "ToggleButton",
            "module": "src/ToggleButton.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/types/ButtonDesign.ts",
      "declarations": [
        {
          "kind": "enum",
          "name": "ButtonDesign",
          "description": "Different Button designs.",
          "_ui5privacy": "public",
          "members": [
            {
              "kind": "field",
              "static": true,
              "privacy": "public",
              "description": "attention type",
              "default": "Attention",
              "name": "Attention",
              "readonly": true
            },
            {
              "kind": "field",
              "static": true,
              "privacy": "public",
              "description": "default type (no special styling)",
              "default": "Default",
              "name": "Default",
              "readonly": true
            },
            {
              "kind": "field",
              "static": true,
              "privacy": "public",
              "description": "emphasized type",
              "default": "Emphasized",
              "name": "Emphasized",
              "readonly": true
            },
            {
              "kind": "field",
              "static": true,
              "privacy": "public",
              "description": "reject style (red button)",
              "default": "Negative",
              "name": "Negative",
              "readonly": true
            },
            {
              "kind": "field",
              "static": true,
              "privacy": "public",
              "description": "accept type (green button)",
              "default": "Positive",
              "name": "Positive",
              "readonly": true
            },
            {
              "kind": "field",
              "static": true,
              "privacy": "public",
              "description": "transparent type",
              "default": "Transparent",
              "name": "Transparent",
              "readonly": true
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "ButtonDesign",
            "module": "src/types/ButtonDesign.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/types/ButtonType.ts",
      "declarations": [
        {
          "kind": "enum",
          "name": "ButtonType",
          "description": "Determines if the button has special form-related functionality.",
          "_ui5privacy": "public",
          "members": [
            {
              "kind": "field",
              "static": true,
              "privacy": "public",
              "description": "The button does not do anything special when inside a form",
              "default": "Button",
              "name": "Button",
              "readonly": true
            },
            {
              "kind": "field",
              "static": true,
              "privacy": "public",
              "description": "The button acts as a reset button (resets a form)",
              "default": "Reset",
              "name": "Reset",
              "readonly": true
            },
            {
              "kind": "field",
              "static": true,
              "privacy": "public",
              "description": "The button acts as a submit button (submits a form)",
              "default": "Submit",
              "name": "Submit",
              "readonly": true
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "ButtonType",
            "module": "src/types/ButtonType.ts"
          }
        }
      ]
    }
  ]
}
